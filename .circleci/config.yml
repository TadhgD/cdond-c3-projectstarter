version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build2]
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build2

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd ./backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build2]
      - run:
          name: Run frontend tests
          command: |
            cd ./frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd ./backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build2]
      - run:
          name: Scan frontend dependencies
          command: |
            cd ./frontend
            npm audit --audit-level=critical
    
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd ./backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar
      - run: yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "tadhg-udapeople-stack-backend" \
              --parameter-overrides ID="tadhg"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "tadhg-udapeople-stack-frontend" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run: echo [all] > ~/inventory.txt
      - run:
          name: Add back-end ip to ansible ~/inventory.txt
          command: |
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "eb:57:a0:9b:fb:9d:da:32:45:d4:52:92:1a:86:6f:2f"
      - attach_workspace:
          at: ~/
      - run:
          name: Test
          command: |    
            ls
            cat ~/inventory.txt
            pwd
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Set up env vars
          command: |
            echo TYPEORM_HOST=${TYPEORM_HOST} >> backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> backend/.env
            cat backend/.env
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            ansible-playbook -i ~/inventory.txt /root/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > ~/migration_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            RES=`grep "has been executed successfully" ~/migration_output.txt | wc -l`
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_KEY}" --request PUT --data "${RES}" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}
     # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          #filters:
          #  branches:
          #    only: 
          #      - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
#      - deploy_frontend:
#          requires:
#            - run_migrations